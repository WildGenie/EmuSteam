/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

#define blurfactorv 1.0 // This number can go lower at lower resolutions to keep things from getting too blurry
#define wid 8.0 // This number can go higher at lower resolutions to keep things from getting too dark

// VERTEX SHADER //

void main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

    uniform float4x4 modelViewProj,

	out float4 oPosition : POSITION,
	out float2 otexCoord : TEXCOORD
)
{
	oPosition = mul(modelViewProj, position);
	otexCoord = texCoord;
}

struct input
{
  float2 video_size;
  float2 texCoord_size;
  float2 output_size;
  float frame_count;
  float frame_direction;
  float frame_rotation;
  sampler2D texture : TEXUNIT0;
};

struct output 
{
  float4 col    : COLOR;
};

// FRAGMENT SHADER //

output main_fragment(in float2 texCoord : TEXCOORD0,
uniform input IN
)
{
  float oney = blurfactorv / IN.output_size.y;

  float c1 = exp(-1.0/wid/wid);
  float c2 = exp(-4.0/wid/wid);
  float c3 = exp(-9.0/wid/wid);
  float c4 = exp(-16.0/wid/wid);
  float norm = 1.0 / (1.0 + 2.0*(c1+c2+c3+c4));

  float4 sum = float4(0.0);

  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y - 4.0 * oney)) * float4(c4);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y - 3.0 * oney)) * float4(c3);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y - 2.0 * oney)) * float4(c2);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y - 1.0 * oney)) * float4(c1);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y)) * 0.16;
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y + 1.0 * oney)) * float4(c1);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y + 2.0* oney)) * float4(c2);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y + 3.0 * oney)) * float4(c3);
  sum += tex2D(IN.texture , float2(texCoord.x, texCoord.y + 4.0 * oney)) * float4(c4);

   output OUT;
   OUT.col = sum / 4.0;
   return OUT;
}
